# Partially stolen from https://github.com/BrodieRobertson/dotfiles/blob/master/config/lf/lfrc 

set shell zsh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set sortby natural


set icons true
set ignorecase true
set ignoredia true
set drawbox true
set incsearch true
set incfilter true
set relativenumber true

set promptfmt "\033[1;43;30m %u \033[0;100;33m \033[1;100;3;33m%d%f \033[0;90m \033[0m"
set errorfmt "\033[97;41m %s \033[0;31m \033[0m"
set truncatechar '~'



# -- FILE PREVIEW --
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id



# -- COMMANDS --

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f -d ${f%.*};;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar -czf $1.tar.gz $1
    rm -rf $1
}}

cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd open_thunar ${{
  thunar $PWD &; disown
}}

cmd media_info !{{
  mediainfo $(printf "$fx")
}}

# TODO: customize using --Inform param
# https://manpages.ubuntu.com/manpages/bionic/man1/mediainfo.1.html
# cmd media_info_brief !{{
#   mediainfo $(printf "$fx")
# }}

cmd dragon_drop %{{
  echo $fx | dragon --and-exit --all --stdin
}}

cmd dragon_download ${{
    url="$(dragon -t -x)"

    if [[ -z "$url" ]]; then
        exit 1
    fi
    
    printf "Filename: "
    filename=""

    while [[ -z "$filename" || -e "$filename" ]]; do
        read -r filename

        if [[ -e "$filename" ]]; then
            printf "File exists, overwrite? [y|N]"
            read -r ans

            if [[ 
                "$ans" == "y" || 
                "$ans" == "Y" || 
                "$ans" == "yes" ]]; then
                    break
                else
                    printf "Filename: "
            fi
        fi
    done

    if [[ -n "$filename" ]]; then
        curl -o "$filename" "$url" || exit 1
    else
        exit 1
    fi
}}

cmd bulk_rename ${{
    # removes absolute path
    vimv $(while IFS=$'\n' read -r line; do printf '%s\n' "$(basename $line)" ; done <<< "$fs")
    # keeps absolute path
    # vimv $fs
}}

# -- Bindings --

# Remove some defaults
map m
map n
map "'"
map '"'
map d
map zh
map t

map au extract

map DD delete
map dd trash
map tC clear_trash
map tr restore_trash
map tl !trash-list

map . set hidden!
map x cut
map <delete> trash
map <enter> shell
map f filter
map F setfilter ""

map sd calcdirsize

map mk mkfile
map md mkdir

map dr dragon_drop # DRagon
map dl dragon_download # Dragon downLoad

map br bulk_rename

map mi media_info # Info All
# map ib media_info_brief # Info Brief

map ot open_thunar

map git ${{clear; git status; echo "press ENTER"; read ENTER}}

map gc cd ~/.config
map gd cd ~/Downloads
map gD cd ~/Documents
map gp cd ~/Pictures
map gv cd ~/Videos
map gf cd ~/Files
map gV cd ~/Files/VUT/2-Semestr
map gs cd ~/.local/src
