[global]
    ### Display ###
    # Which monitor should the notifications be displayed on.
    #
    monitor = 1

    # Display on monitor focused by: [mouse | keyboard | none]
    #
    follow = none



    ### Geometry ###
    #
    width = 300
    height = 130
    origin = top-right
    offset = 10x10
    scale = 0
    notification_limit = 0



    ### Progress bar ###
    # for example dunstify -h int:value:12
    #
    progress_bar = true
    progress_bar_height = 15
    progress_bar_frame_width = 2
    progress_bar_min_width = 150
    progress_bar_max_width = 300

    # Show how many messages are currently hidden (because of notification_limit).
    #
    indicate_hidden = yes

    # The transparency of the window.  Range: [0; 100]. (X11 only)
    #
    transparency = 0

    # Draw a line of "separator_height" pixel height between two notifications.
    #
    separator_height = 2
    separator_color = frame

    padding = 15
    horizontal_padding = 8
    text_icon_padding = 15
    frame_width = 4
    frame_color = "#9e891b"

	# Gap between notifications
    #
    gap_size = 10

    # Sort messages by urgency.
    #
    sort = yes

	# Don't remove notifications if no mouse/keyboard input for X seconds (0 - disabled)
    #
    idle_threshold = 120



    ### Text ###
    #
    font = Notosans 10
    line_height = 0

    # [ full | strip | no ]
    #
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    #
    format = "<b>%a</b>\n\n<b>%s</b>\n%b"

    # Text alignment [ left | center | right ]
    #
    alignment = left

    # Vertical text and icon alignment [ top | center | bottom ]
    #
    vertical_alignment = top

    show_age_threshold = 60

    # Cut off long lines [ start | middle | end ]
    #
    ellipsize = end

    # Ignore newlines '\n' in notifications.
    #
    ignore_newline = no

    # Stack together notifications with the same content
    #
    stack_duplicates = true
    hide_duplicate_count = false

    # Display indicators for URLs (U) and actions (A).
    #
    show_indicators = no



    ### Icons ###
    # Recursive icon lookup. You can set a single theme, instead of having to
    # define all lookup paths.
    #
    enable_recursive_icon_lookup = true

    # Set icon theme (only used for recursive icon lookup)
    # You can also set multiple icon themes, with the leftmost one being used first.
    # icon_theme = "Adwaita, breeze"
    #
    icon_theme = "Flat-Remix-Grey-Dark, Adwaita"

    # Align icons [ left | right | top | off ]
    #
    icon_position = left

    # Scale small icons up to this size, set to 0 to disable. Helpful
    # for e.g. small files or high-dpi screens. In case of conflict,
    # max_icon_size takes precedence over this.
    #
    min_icon_size = 100

    # Scale larger icons down to this size, set to 0 to disable
    #
    max_icon_size = 100

    # Paths to default icons (only neccesary when not using recursive icon lookup)
    #
    icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/



    ### History ###
    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    #
    sticky_history = no
    history_length = 50


    ### Misc/Advanced ###
    # dmenu path.
    #
    dmenu = /usr/bin/dmenu -p dunst:

    # Browser for opening urls in context menu.
    #
    browser = /usr/bin/xdg-open

    # Always run rule-defined scripts, even if the notification is suppressed
    #
    always_run_script = true

    # Define the title of the windows spawned by dunst
    #
    title = Dunst

    # Define the class of the windows spawned by dunst
    #
    class = Dunst

    corner_radius = 10

    # Ignore the dbus closeNotification message.
    # Useful to enforce the timeout set by dunst configuration. Without this
    # parameter, an application may close the notification sent before the
    # user defined timeout.
    #
    ignore_dbusclose = false



    ### Wayland ###
    # These settings are Wayland-specific. They have no effect when using X11

    # Uncomment this if you want to let notications appear under fullscreen
    # applications (default: overlay)
    #
    # layer = top

    # Set this to true to use X11 output on Wayland.
    #
    force_xwayland = false


    ### Legacy ###
    force_xinerama = false



    ### Mouse ###
    # Defines list of actions for each mouse event
    # Possible values are:
    # * none: Don't do anything.
    # * do_action: Invoke the action determined by the action_name rule. If there is no
    #              such action, open the context menu.
    # * open_url: If the notification has exactly one url, open it. If there are multiple
    #             ones, open the context menu.
    # * close_current: Close current notification.
    # * close_all: Close all notifications.
    # * context: Open context menu for the notification.
    # * context_all: Open context menu for all notifications.
    # These values can be strung together for each mouse event, and
    # will be executed in sequence.
    #
    mouse_left_click = close_current
    mouse_middle_click = do_action, close_current
    mouse_right_click = close_all



# Experimental features that may or may not work correctly. Do not expect them
# to have a consistent behaviour across releases.
[experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    #
    per_monitor_dpi = false


[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    #
    background = "#2c2c2c"
    foreground = "#b0b0b0"
    timeout = 2

    # Icon for notifications with low urgency, uncomment to enable
    #default_icon = /path/to/icon


[urgency_normal]
    background = "#2c2c2c"
    foreground = "#b0b0b0"
    timeout = 7
    
    # Icon for notifications with normal urgency, uncomment to enable
    #default_icon = /path/to/icon


[urgency_critical]
    background = "#ac2020"
    foreground = "#ffffff"
    frame_color = "#ff0000"
    timeout = 0
    
    # Icon for notifications with critical urgency, uncomment to enable
    #default_icon = /path/to/icon


[WebCord]
	appname = WebCord
	urgency = normal
	background = "#303569"


# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
#
# Messages can be matched by
#    appname (discouraged, see desktop_entry)
#    body
#    category
#    desktop_entry
#    icon
#    match_transient
#    msg_urgency
#    stack_tag
#    summary
#
# and you can override the
#    background
#    foreground
#    format
#    frame_color
#    fullscreen
#    new_icon
#    set_stack_tag
#    set_transient
#    set_category
#    timeout
#    urgency
#    icon_position
#    skip_display
#    history_ignore
#    action_name
#    word_wrap
#    ellipsize
#    alignment
#    hide_text
#
# Shell-like globbing will get expanded.
#
# Instead of the appname filter, it's recommended to use the desktop_entry filter.
# GLib based applications export their desktop-entry name. In comparison to the appname,
# the desktop-entry won't get localized.
#
# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

# Disable the transient hint so that idle_threshold cannot be bypassed from the
# client
#[transient_disable]
#    match_transient = yes
#    set_transient = no
#
# Make the handling of transient notifications more strict by making them not
# be placed in history.
#[transient_history_ignore]
#    match_transient = yes
#    history_ignore = yes

# fullscreen values
# show: show the notifications, regardless if there is a fullscreen window opened
# delay: displays the new notification, if there is no fullscreen window active
#        If the notification is already drawn, it won't get undrawn.
# pushback: same as delay, but when switching into fullscreen, the notification will get
#           withdrawn from screen again and will get delayed like a new notification
#[fullscreen_delay_everything]
#    fullscreen = delay
#[fullscreen_show_critical]
#    msg_urgency = critical
#    fullscreen = show

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    skip_display = true

#[history-ignore]
#    # This notification will not be saved in history
#    summary = "foobar"
#    history_ignore = yes

#[skip-display]
#    # This notification will not be displayed, but will be included in the history
#    summary = "foobar"
#    skip_display = yes

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal
#
#[stack-volumes]
#    appname = "some_volume_notifiers"
#    set_stack_tag = "volume"
#
# vim: ft=cfg
